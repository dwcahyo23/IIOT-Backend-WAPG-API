import { Sequelize } from 'sequelize'
import db from '../config/db'
const { DataTypes } = Sequelize
export const Bas_pdc_mast = db.define(
  'bas_pdc_mast',
  {
    pdc_1: DataTypes.CHAR(4),
    pdc_2: DataTypes.CHAR(8),
    pdc_3: DataTypes.CHAR(8),
    pdc_4: DataTypes.CHAR(4),
    pdc_code: DataTypes.CHAR(30),
    pdc_con: DataTypes.CHAR(15),
    pdc_size: DataTypes.CHAR(30),
    pdc_name: DataTypes.CHAR(80),
    pdc_cname: DataTypes.CHAR(80),
    pdc_euname: DataTypes.CHAR(80),
    ass_mk: DataTypes.CHAR(1),
    buy_in: DataTypes.CHAR(1),
    sca_proc: DataTypes.CHAR(1),
    stop_yn: DataTypes.CHAR(1),
    ymd: DataTypes.DATE(6),
    wire_no: DataTypes.CHAR(20),
    nya_kind: DataTypes.CHAR(5),
    mju_kind: DataTypes.CHAR(5),
    mk1: DataTypes.CHAR(1),
    mk2: DataTypes.CHAR(1),
    mk3: DataTypes.CHAR(1),
    new_mk: DataTypes.CHAR(1),
    r_pdc_1000_wt: DataTypes.INTEGER,
    s_pdc_1000_wt: DataTypes.INTEGER,
    wire_1000_wt: DataTypes.INTEGER,
    head_1000_wt: DataTypes.INTEGER,
    head_mark: DataTypes.CHAR(10),
    wire_dia: DataTypes.CHAR(10),
    drw_dia: DataTypes.CHAR(10),
    wire_dia_up: DataTypes.INTEGER,
    wire_dia_dn: DataTypes.INTEGER,
    kg_loss_1000: DataTypes.INTEGER,
    kg_rate_1000: DataTypes.INTEGER,
    mch_kind: DataTypes.CHAR(10),
    mch_kind2: DataTypes.CHAR(10),
    use_spec2: DataTypes.CHAR(1),
    use_spec: DataTypes.CHAR(1),
    flw_ass: DataTypes.CHAR(20),
    ctn_qty: DataTypes.INTEGER,
    ctn_qty_9: DataTypes.INTEGER,
    ctn_qty_loc: DataTypes.INTEGER,
    ctn_qty_36: DataTypes.INTEGER,
    pmt_no: DataTypes.CHAR(20),
    sml_pmt_no: DataTypes.CHAR(20),
    toothkind: DataTypes.CHAR(1),
    grade: DataTypes.CHAR(1),
    pict_no: DataTypes.CHAR(50),
    exp_base_price: DataTypes.INTEGER,
    saft_qty: DataTypes.INTEGER,
    base_price: DataTypes.INTEGER,
    cost_1: DataTypes.INTEGER,
    cost_2: DataTypes.INTEGER,
    cost_3: DataTypes.INTEGER,
    cost_4: DataTypes.INTEGER,
    cost_5: DataTypes.INTEGER,
    cost_6: DataTypes.INTEGER,
    cost_7: DataTypes.INTEGER,
    cost_8: DataTypes.INTEGER,
    cost_9: DataTypes.INTEGER,
    cost_10: DataTypes.INTEGER,
    bas_price: DataTypes.INTEGER,
    path: DataTypes.CHAR(100),
    sal_kind_no: DataTypes.CHAR(5),
    kind_no: DataTypes.CHAR(5),
    pdc_area: DataTypes.CHAR(5),
    pcs_ctn: DataTypes.INTEGER,
    pcs_up_ctn: DataTypes.INTEGER,
    remark: DataTypes.CHAR(100),
    dia_11: DataTypes.INTEGER,
    dia_12: DataTypes.INTEGER,
    draw_no: DataTypes.CHAR(50),
    dia_21: DataTypes.INTEGER,
    dia_22: DataTypes.INTEGER,
    dia_31: DataTypes.INTEGER,
    dia_32: DataTypes.INTEGER,
    dia_41: DataTypes.INTEGER,
    dia_42: DataTypes.INTEGER,
    dia_51: DataTypes.INTEGER,
    dia_52: DataTypes.INTEGER,
    mk4: DataTypes.CHAR(1),
    appe_user: DataTypes.CHAR(10),
    appe_time: DataTypes.DATE(6),
    modi_user: DataTypes.CHAR(10),
    modi_time: DataTypes.DATE(6),
    old_pdc_code: DataTypes.CHAR(30),
    exc_rate: DataTypes.INTEGER,
    hardness: DataTypes.CHAR(30),
    cofm_mk: DataTypes.CHAR(1),
    cofm_ymd: DataTypes.DATE(6),
    cofm_man: DataTypes.CHAR(10),
    service_mk: DataTypes.CHAR(1),
    hardness2: DataTypes.CHAR(30),
    update_date: DataTypes.DATE(6),
    update_spk: DataTypes.CHAR(15),
    pack_date: DataTypes.DATE(6),
    ubot_kind: DataTypes.CHAR(10),
    process_type: DataTypes.CHAR(1),
    modi_user2: DataTypes.CHAR(10),
    modi_time2: DataTypes.DATE(6),
    mou_pdc_size: DataTypes.CHAR(30),
    hs_no: DataTypes.CHAR(50),
    new_code: DataTypes.CHAR(50),
    bdt_no: DataTypes.CHAR(20),
  },
  { freezeTableName: true, timestamps: false },
)
